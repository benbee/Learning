/*
 *  spwd.c -- a simpile version of pwd
 *
 *  starts in current direntory an recursively
 *  climbs up to root of filesystem, prints top part
 *  then print current part.
 *
 *  use readdir() to get info about each thing.
 *
 *  bug: print an empty string if run from "/"
 */
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

ino_t get_inode(char *);
void printpathto(ino_t);
void inum_to_name(ino_t, char *, int);

int main(int argc, char *argv[])
{
    printpathto(get_inode(".")); /* print path to here */
	putchar('\n');				 /* then add newline */
	
    return 0;
}

void printpathto(ino_t this_node)
/*
 * prints path leading down to an object with this inode
 * kindof recursive
 */
{
	ino_t my_inode;
	char its_name[BUFSIZ];
	if (get_inode("..") != this_node) {
		chdir("..");			/* up one dir */
		inum_to_name(this_node, its_name, BUFSIZ); /* get itsname */
		my_inode = get_inode(".");	/* print head */
		printpathto(my_inode);	/* recursively */
		printf("/%s", its_name);	/* now print
										name of this */
	}
}
void inum_to_name(ino_t inode_to_find, char *name_buf, int buflen)
/* 
 * looks through current directory for a file with this inodeo
 * number and copies its name into namebuf
 */
{
	DIR *dir_ptr;				/* the directory */
	struct dirent *direntp;		/* each entry */
	dir_ptr = opendir(".");
	if (dir_ptr == NULL) {
		perror(".");
		exit(1);
	}

	/*
	 * search directory for a file with specified inum
	 */
	while ((direntp = readdir(dir_ptr)) != NULL) {
		if (direntp->d_ino == inode_to_find) {
			strncpy(namebuf, direntp->d_name, buflen);
			name_buf[buflen-1] = '\0'; /* just in case */
			closedir(dir_ptr);
			return;
		}
	}

	fprintf(stderr, "error looking for inum %d\n", inode_to_find);
	exit(1);
}
